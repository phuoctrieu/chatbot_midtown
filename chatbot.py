import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import webbrowser
from history import INITIAL_CHAT_HISTORY

# Configure the page
st.set_page_config(
    page_title="Midtown Restaurant AI Assistant",
    page_icon="üçΩÔ∏è",
    layout="wide"
)

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
api_key = "AIzaSyC6TsnVHQ8S8RDkNmZo-cnIZODJqeA_-Ek"
genai.configure(api_key=api_key)



def initialize_session_state():
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "model" not in st.session_state:
        generation_config = {
            "temperature": 0.9,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
        }
        
        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]
        
        st.session_state.model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
    
    if "chat" not in st.session_state:
        st.session_state.chat = st.session_state.model.start_chat(
            history=INITIAL_CHAT_HISTORY
        )

def display_chat_interface():
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["parts"])

    # Chat input
    if prompt := st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n... (Ask your questions ...)"):
        # Add user message to chat
        st.chat_message("user").write(prompt)
        st.session_state.messages.append({"role": "user", "parts": prompt})

        try:
            # Get bot response with loading indicator
            with st.chat_message("assistant"):
                with st.spinner("ƒêang suy nghƒ©..."):
                    response = st.session_state.chat.send_message(prompt)
                    st.write(response.text)
                    st.session_state.messages.append({"role": "assistant", "parts": response.text})
        except Exception as e:
            st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
# Constants
RESTAURANT_INFO = """
MIDTOWN RESTAURANT\n
ƒê·ªãa ch·ªâ: ƒë∆∞·ªùng Kon-Khoai, th·ªã tr·∫•n A L∆∞·ªõi, huy·ªán A L∆∞·ªõi, t·ªânh Th·ª´a Thi√™n Hu·∫ø
\n
Li√™n h·ªá: √Ånh Nguy·ªÖn (0344135008)
"""
# Thay ƒë·ªïi ƒë·ªÉ s·ª≠ d·ª•ng link tr·ª±c ti·∫øp
MAPS_LINK = "https://maps.app.goo.gl/35fL6oFzKuVM6gJp6"



def main():
    # Add logo and title in columns
    col1, col2 = st.columns([1, 5])
    
    with col1:
        st.image("logo.png", width=100)  # Adjust width as needed
    with col2:
        st.title("TR·ª¢ L√ù NH√Ä H√ÄNG MIDTOWN\n ASSISTANT RESTAURANT")

    st.markdown("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·ª£ l√Ω ·∫£o c·ªßa nh√† h√†ng Midtown! (Welcome to the Midtown restaurant virtual assistant!)\n
                 
    T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ menu, ƒë·∫∑t b√†n v√† tr·∫£ l·ªùi m·ªçi th·∫Øc m·∫Øc v·ªÅ nh√† h√†ng. (I can help you learn about the menu, book a table and answer any questions about the restaurant.)
    """)
    
   
    

    # Sidebar content
    with st.sidebar:
        st.header("üìç Th√¥ng tin nh√† h√†ng")
        st.info(RESTAURANT_INFO)
        # Th√™m n√∫t ch·ªâ ƒë∆∞·ªùng v·ªõi link tr·ª±c ti·∫øp
        if st.button("üó∫Ô∏è Xem ch·ªâ ƒë∆∞·ªùng", use_container_width=True):
            webbrowser.open_new_tab(MAPS_LINK)
        
        st.header("‚è∞ Gi·ªù m·ªü c·ª≠a")
        st.write("H√†ng ng√†y: 10:00 - 23:00")
        
        st.header("üîÑ ƒêi·ªÅu khi·ªÉn")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìã Xem menu", use_container_width=True):
                st.session_state.show_menu = True
        with col2:
            if st.button("üîÑ Reset chat", use_container_width=True):
                st.session_state.messages = []
                st.session_state.chat = st.session_state.model.start_chat()
                st.rerun()
                
        # Th√™m n√∫t About Midtown
        st.header("üè† Gi·ªõi thi·ªáu")
        if st.button("About Midtown", use_container_width=True):
            st.session_state.show_about = True

    # Initialize session state for menu visibility
    if 'show_menu' not in st.session_state:
        st.session_state.show_menu = False

    # Display full-screen menu if show_menu is True
    if st.session_state.show_menu:
        modal = st.container()
        with modal:
            st.markdown("<h3 style='text-align: center;'>Menu Nh√† h√†ng Midtown</h3>", unsafe_allow_html=True)
            st.image("menu.png", use_container_width=True)
            if st.button("ƒê√≥ng menu"):
                st.session_state.show_menu = False
                st.rerun()

    # Initialize session state for about modal
    if 'show_about' not in st.session_state:
        st.session_state.show_about = False

    # Display about modal if show_about is True
    if st.session_state.show_about:
        modal = st.container()
        with modal:
            st.markdown("<h3 style='text-align: center;'>About Midtown Restaurant</h3>", unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh trong grid layout
            col1, col2 = st.columns(2)
            with col1:
                st.image("restaurant1.jpg", caption="Khu v·ª±c s√¢n v∆∞·ªùn", use_container_width=True)
                st.image("restaurant3.jpg", caption="Kh√¥ng gian trong nh√†", use_container_width=True)
            with col2:
                st.image("restaurant2.jpg", caption="Kh√¥ng gian ngo√†i tr·ªùi", use_container_width=True)
                st.image("restaurant4.jpg", caption="C·∫£nh s√¢n v∆∞·ªùn", use_container_width=True)
                
            if st.button("ƒê√≥ng"):
                st.session_state.show_about = False
                st.rerun()

    # Initialize session state
    initialize_session_state()

    # Display chat interface
    display_chat_interface()

if __name__ == "__main__":
    main()
